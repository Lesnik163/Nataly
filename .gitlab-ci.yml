stages:
  - build-image
  - build
  - lint

variables:
  OWNER_NAME: 'DMITRII LIUBICH'
  CICD_VERSION: 'v1.0.1'
  LOG_FILE_NAME: log.txt
  SUCCESS_MESSAGE: 'completed successfully'
  DOCKER_TLS_CERTDIR: '/certs'

# Сначала собираем образ
build-image:
  stage: build-image
  image: docker:latest
  services:
    - docker:dind
  before_script:
    - docker info
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - docker build --pull --no-cache -t $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA .
    - docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA
    - echo "Image built and pushed successfully"
  artifacts:
    reports:
      dotenv: build.env # Сохраняем переменные для следующих этапов
    paths:
      - $LOG_FILE_NAME

# Затем используем готовый образ
build:
  stage: build
  image: $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA
  needs: ['build-image'] # Явная зависимость
  script:
    - echo "Build started!" > $LOG_FILE_NAME
    - npm run build >> $LOG_FILE_NAME
    - echo "build $SUCCESS_MESSAGE" >> $LOG_FILE_NAME
  artifacts:
    paths:
      - .next/
      - $LOG_FILE_NAME
    expire_in: 1 week

lint:
  stage: lint
  image: $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA
  needs: ['build-image']
  script:
    - echo "Lint started!" >> $LOG_FILE_NAME
    - npm run lint >> $LOG_FILE_NAME
    - echo "lint $SUCCESS_MESSAGE" >> $LOG_FILE_NAME
  allow_failure: true # Линтинг не должен падать весь пайплайн
